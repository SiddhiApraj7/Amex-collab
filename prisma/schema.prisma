generator client {
  provider      = "prisma-client-js"
  output        = "./prisma-client"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                  String  @id @default(uuid())
  phoneNumber             String? @unique
  firstName               String?
  recoveryEmail           String? @unique
  lastName                String?
  walletPin               Int?
  bankName                String?
  bankAccountHolderName   String?
  accountNumber           Int?     @unique
  isBeneficiary           Boolean @default(true)
  isPvtOrg                Boolean? @default(false)
  isServiceProvider       Boolean? @default(false)
  walletIdBeneficiary     String?
  walletIdPvtOrg          String?
  walletIdServiceProvider String?
  beneficiaryInfo         beneficiary?
  pvtOrgInfo              pvtOrg?
  serviceProviderInfo     serviceProvider?
  createdAt               DateTime @default(now())
  UpdatedAt               DateTime @updatedAt
  
}

enum Role {
  ADMIN
  SUPERADMIN
}

model beneficiary {
  beneficiaryId String @id @default(uuid())
  Users         Users    @relation(fields: [beneficiaryId], references: [id])
  // AvailableVouchers   Voucher[]
}

model Voucher{
  // qrCode 
  voucherId String @id @default(uuid())
  voucherName String
  voucherAmount Int
  voucherDescription String
  voucherImage String
  voucherCode String
  voucherExpiryDate DateTime
  voucherRedeemed Boolean @default(false)
  voucherRedeemedDate DateTime?
  voucherRedeemedBy String?
  // voucherRedeemedByUser Users? @relation(fields: [voucherRedeemedBy], references: [id])
}
model pvtOrg {
  privateOrgId String @id @default(uuid())
  Users         Users    @relation(fields: [privateOrgId], references: [id])
}

model serviceProvider {
  serviceProviderId String @id @default(uuid())
  Users         Users    @relation(fields: [serviceProviderId], references: [id])
}